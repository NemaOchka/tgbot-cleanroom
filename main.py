import asyncio
from aiogram import Dispatcher, Bot, executor, types
from datetime import datetime
import config
import markup as nav
import funcs


TOKEN = config.BOT_TOKEN

bot = Bot(token = TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    with open("work.txt", "w", encoding="utf-8") as file_write:
        file_write.write("True")
    await bot.send_message(message.chat.id, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.", reply_markup=nav.mainMenu)
    await my_func()


@dp.message_handler(commands=['help'])
async def command_help(message: types.Message):
    text = ['/start - —Ä–æ–∑–ø–æ—á–∏–Ω–∞—î —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞, –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –ø—Ä–∞—Ü—é—î –æ–∫—Ä–µ–º–æ',
            '/help - –¥–æ–≤—ñ–¥–∫–∞',
            '/show - –ø–æ–∫–∞–∑—É—î —á–µ—Ä–≥–æ–≤–æ–≥–æ —Ç–∞ –∂–∏—Ç–µ–ª—ñ–≤ –∫—ñ–º–Ω–∞—Ç–∏',
            '/add - –¥–æ–±–∞–≤–ª—è—î –Ω–æ–≤–æ–≥–æ –∂–∏—Ç–µ–ª—è –∑–∞ –≤–≤–µ–¥–µ–Ω–∏–º —ñ–º–µ–Ω–µ–º',
            '/delete - –≤–∏–¥–∞–ª—è—î –∂–∏—Ç–µ–ª—è –∑–∞ –≤–≤–µ–¥–µ–Ω–∏–º —ñ–º–µ–Ω–µ–º',
            '/stop - –∑—É–ø–∏–Ω—è—î —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞ (–¥–ª—è –≤—Å—ñ—Ö)']
    await bot.send_message(message.chat.id, text='\n'.join(text))


@dp.message_handler()
async def bot_message(message: types.Message):
    with open("work.txt", "r", encoding="utf-8") as file_read:
        if file_read.readline() == "True":
            if message.text == 'ü§±–ø–æ–∫–∞–∑–∞—Ç–∏ —á–µ—Ä–≥–æ–≤–æ–≥–æ' or message.text == "/show":
                await bot.send_message(message.chat.id, text=funcs.show_duty())

            elif message.text == 'üíë–¥–æ–¥–∞—Ç–∏ –∂–∏–ª—å—Ü—è':
                await bot.send_message(message.chat.id, text="/add {—ñ–º'—è –∂–∏—Ç–µ–ª—è}")

            elif message.text.split()[0] == "/add":
                await bot.send_message(message.chat.id, text=funcs.add_roommate("".join(message.text.rstrip().split()[1:])))

            elif message.text == '‚ò†Ô∏è–≤–∏–¥–∞–ª–∏—Ç–∏ –∂–∏–ª—å—Ü—è':
                await bot.send_message(message.chat.id, text="/del {—ñ–º'—è –∂–∏—Ç–µ–ª—è}")

            elif message.text.split()[0] == "/del":
                await bot.send_message(message.chat.id, text=funcs.delete_roommate("".join(message.text.rstrip().split()[1:])))

            elif message.text.split()[0] == "/stop":
                with open("work.txt", "w", encoding="utf-8") as file_write:
                    file_write.write("False")
                await bot.send_message(message.chat.id, text="–ë–æ—Ç–∞ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ")



loop = asyncio.get_event_loop()
delay = 60.0

async def my_func(): # –º—ñ–Ω—è—î–º–æ —á–µ—Ä–≥–æ–≤–æ–≥–æ
    with open("work.txt", "r", encoding="utf-8") as file_read:
        if file_read.readline() == "True":
            mess = funcs.distribution(datetime.now())
            if len(mess):
                await bot.send_message("-604531942", text=mess)
    when_to_call = loop.time() + delay
    loop.call_at(when_to_call, my_callback)

def my_callback():
    asyncio.ensure_future(my_func())




if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
